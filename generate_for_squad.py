import evaluation
import qrdatasets
import models
from utils import *
import torch
import random
import t5small
from qrdatasets import *

# This script generates two json output files (one for CANARD, one for CoQA-QR)
# each json file is a list of dictionaries with the following structure
# {
#   'paragraph' : "...",
#   'question' : a question on the paragraph, taken from the dialogue
#   'gold_res': a resolution of the question (human annotation from the dataset),
#   'coqaqr_res' : a resolution generated by a model trained on coqa-qr,
#   'canard_res' : same with a model trained on canard,
#   'mixed_res' : same, with a model trained on a mix of canard and coqa-qr,
#   'answers' : a list of spans from the paragraph, which provide possible answers to the question
# }

if __name__ == '__main__':
    random.seed(3)
    model_names = ('coqaqr', 'canard', 'mixed')
    ds_names = ('coqaqr', 'canard')
    
    models = { name : torch.load(f'data/trained_models/best_{name}_model')
               for name in model_names }

    data = {'coqaqr' : get_elda_test_set(True),
            'canard' : get_canard_test_set(True)}
   
    for ds_name in ds_names:
        data[ds_name]['references'] = [
                [random.choice(r)]
                for r in data[ds_name]['references']
        ]
   
    predictions = {'coqaqr' : {}, 'canard' : {}}
    for model_name in model_names:
        for ds_name in ds_names:
            predictions[ds_name][model_name] = \
                evaluation.generate_predictions(
                    models[model_name],
                    data[ds_name],
                    t5small.MODEL_DIC['dataset_maker'],
                    t5small.MODEL_DIC['output_tokenizer_getter'](),
                    hparams = {
                        'include_story' : False,
                        'history_size' : 20,
                        'batch_size' : 16
                    })
    
    for ds_name in ds_names:
        output = [
                {
                    'paragraph' : p,
                    'question' : seq[-1],
                    'gold_res': r[0],
                    'coqaqr_res' : x,
                    'canard_res' : y,
                    'mixed_res' : z,
                    'answers' : a
                }
                for p, seq, r, a, x, y, z in zip(
                    data[ds_name]['context'],
                    data[ds_name]['input'],
                    data[ds_name]['references'],
                    data[ds_name]['answer_spans'],
                    predictions[ds_name]['coqaqr'],
                    predictions[ds_name]['canard'],
                    predictions[ds_name]['mixed']
                )
        ]
    
        json_save(output, f'data/{ds_name}-qa-eval-input.json', indent = 1)
